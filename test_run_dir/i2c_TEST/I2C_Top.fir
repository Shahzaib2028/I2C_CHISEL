;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit I2C_Top : 
  module i2c_master : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, flip addr : UInt<7>, flip data : UInt<8>, flip i2c_sda_in : UInt<1>, i2c_sda : UInt<1>, i2c_scl : UInt<1>, ready : UInt<1>, stop : UInt<1>, i2c_intr : UInt<1>}
    
    reg state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_master.scala 24:24]
    reg count : UInt<15>, clock with : (reset => (reset, UInt<15>("h00"))) @[i2c_master.scala 25:24]
    reg saved_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[i2c_master.scala 26:29]
    reg saved_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_master.scala 27:29]
    reg i2c_scl_enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[i2c_master.scala 28:33]
    reg intr_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_master.scala 29:28]
    state <= UInt<3>("h00") @[i2c_master.scala 31:11]
    io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 33:16]
    io.ready <= UInt<1>("h00") @[i2c_master.scala 34:14]
    io.stop <= UInt<1>("h00") @[i2c_master.scala 35:13]
    node _clk_T = asUInt(clock) @[i2c_master.scala 37:36]
    node _clk_T_1 = bits(_clk_T, 0, 0) @[i2c_master.scala 37:38]
    wire clk : UInt<1>
    clk <= _clk_T_1
    node _rst_T = asUInt(reset) @[i2c_master.scala 38:36]
    node _rst_T_1 = bits(_rst_T, 0, 0) @[i2c_master.scala 38:38]
    wire rst : UInt<1>
    rst <= _rst_T_1
    node _io_i2c_scl_T = eq(i2c_scl_enable, UInt<1>("h00")) @[i2c_master.scala 40:38]
    node _io_i2c_scl_T_1 = not(clk) @[i2c_master.scala 40:54]
    node _io_i2c_scl_T_2 = mux(_io_i2c_scl_T, UInt<1>("h01"), _io_i2c_scl_T_1) @[i2c_master.scala 40:22]
    io.i2c_scl <= _io_i2c_scl_T_2 @[i2c_master.scala 40:16]
    node _T = eq(rst, UInt<1>("h01")) @[i2c_master.scala 42:14]
    when _T : @[i2c_master.scala 42:22]
      i2c_scl_enable <= UInt<1>("h00") @[i2c_master.scala 43:24]
      skip @[i2c_master.scala 42:22]
    else : @[i2c_master.scala 44:16]
      node _T_1 = eq(state, UInt<3>("h00")) @[i2c_master.scala 45:22]
      node _T_2 = eq(state, UInt<3>("h01")) @[i2c_master.scala 45:46]
      node _T_3 = or(_T_1, _T_2) @[i2c_master.scala 45:37]
      node _T_4 = eq(state, UInt<3>("h07")) @[i2c_master.scala 45:71]
      node _T_5 = or(_T_3, _T_4) @[i2c_master.scala 45:62]
      when _T_5 : @[i2c_master.scala 45:87]
        i2c_scl_enable <= UInt<1>("h00") @[i2c_master.scala 46:28]
        skip @[i2c_master.scala 45:87]
      else : @[i2c_master.scala 47:20]
        i2c_scl_enable <= UInt<1>("h01") @[i2c_master.scala 48:29]
        skip @[i2c_master.scala 47:20]
      skip @[i2c_master.scala 44:16]
    node _T_6 = eq(rst, UInt<1>("h01")) @[i2c_master.scala 52:14]
    when _T_6 : @[i2c_master.scala 52:22]
      state <= UInt<3>("h00") @[i2c_master.scala 53:15]
      io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 54:20]
      skip @[i2c_master.scala 52:22]
    else : @[i2c_master.scala 55:16]
      node _T_7 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 40:58]
        io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 58:28]
        intr_done <= UInt<1>("h00") @[i2c_master.scala 59:27]
        node _T_8 = eq(io.start, UInt<1>("h01")) @[i2c_master.scala 60:31]
        when _T_8 : @[i2c_master.scala 60:39]
          state <= UInt<3>("h01") @[i2c_master.scala 61:27]
          io.ready <= UInt<1>("h00") @[i2c_master.scala 62:30]
          io.stop <= UInt<1>("h00") @[i2c_master.scala 63:29]
          skip @[i2c_master.scala 60:39]
        else : @[i2c_master.scala 64:28]
          state <= UInt<3>("h00") @[i2c_master.scala 65:27]
          skip @[i2c_master.scala 64:28]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_9 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
        when _T_9 : @[Conditional.scala 39:67]
          io.i2c_sda <= UInt<1>("h00") @[i2c_master.scala 71:28]
          saved_addr <= io.addr @[i2c_master.scala 72:28]
          saved_data <= io.data @[i2c_master.scala 73:28]
          io.ready <= UInt<1>("h01") @[i2c_master.scala 74:26]
          io.stop <= UInt<1>("h00") @[i2c_master.scala 75:25]
          state <= UInt<3>("h02") @[i2c_master.scala 76:23]
          count <= UInt<3>("h06") @[i2c_master.scala 77:23]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_10 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
          when _T_10 : @[Conditional.scala 39:67]
            node _io_i2c_sda_T = dshr(saved_addr, count) @[i2c_master.scala 81:41]
            node _io_i2c_sda_T_1 = bits(_io_i2c_sda_T, 0, 0) @[i2c_master.scala 81:41]
            io.i2c_sda <= _io_i2c_sda_T_1 @[i2c_master.scala 81:28]
            io.ready <= UInt<1>("h00") @[i2c_master.scala 82:26]
            io.stop <= UInt<1>("h00") @[i2c_master.scala 83:25]
            node _T_11 = eq(count, UInt<1>("h00")) @[i2c_master.scala 84:28]
            when _T_11 : @[i2c_master.scala 84:36]
              state <= UInt<3>("h03") @[i2c_master.scala 85:27]
              skip @[i2c_master.scala 84:36]
            else : @[i2c_master.scala 86:28]
              node _count_T = sub(count, UInt<1>("h01")) @[i2c_master.scala 87:36]
              node _count_T_1 = tail(_count_T, 1) @[i2c_master.scala 87:36]
              count <= _count_T_1 @[i2c_master.scala 87:27]
              state <= UInt<3>("h02") @[i2c_master.scala 88:27]
              skip @[i2c_master.scala 86:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              io.i2c_sda <= UInt<1>("h00") @[i2c_master.scala 94:28]
              io.ready <= UInt<1>("h00") @[i2c_master.scala 95:26]
              io.stop <= UInt<1>("h00") @[i2c_master.scala 96:25]
              state <= UInt<3>("h04") @[i2c_master.scala 97:23]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_13 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 103:32]
                node _T_14 = eq(io.i2c_sda_in, UInt<1>("h00")) @[i2c_master.scala 104:40]
                when _T_14 : @[i2c_master.scala 104:48]
                  state <= UInt<3>("h05") @[i2c_master.scala 105:31]
                  count <= UInt<3>("h07") @[i2c_master.scala 106:31]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 107:34]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 108:33]
                  skip @[i2c_master.scala 104:48]
                else : @[i2c_master.scala 109:32]
                  state <= UInt<3>("h07") @[i2c_master.scala 110:31]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 111:34]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 112:33]
                  skip @[i2c_master.scala 109:32]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_15 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
                when _T_15 : @[Conditional.scala 39:67]
                  node _io_i2c_sda_T_2 = dshr(io.data, count) @[i2c_master.scala 119:38]
                  node _io_i2c_sda_T_3 = bits(_io_i2c_sda_T_2, 0, 0) @[i2c_master.scala 119:38]
                  io.i2c_sda <= _io_i2c_sda_T_3 @[i2c_master.scala 119:28]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 120:26]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 121:25]
                  node _T_16 = eq(count, UInt<1>("h00")) @[i2c_master.scala 122:28]
                  when _T_16 : @[i2c_master.scala 122:36]
                    state <= UInt<3>("h06") @[i2c_master.scala 123:27]
                    skip @[i2c_master.scala 122:36]
                  else : @[i2c_master.scala 124:28]
                    node _count_T_2 = sub(count, UInt<1>("h01")) @[i2c_master.scala 125:36]
                    node _count_T_3 = tail(_count_T_2, 1) @[i2c_master.scala 125:36]
                    count <= _count_T_3 @[i2c_master.scala 125:27]
                    state <= UInt<3>("h05") @[i2c_master.scala 126:27]
                    skip @[i2c_master.scala 124:28]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_17 = eq(UInt<3>("h06"), state) @[Conditional.scala 37:30]
                  when _T_17 : @[Conditional.scala 39:67]
                    io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 132:28]
                    io.ready <= UInt<1>("h00") @[i2c_master.scala 133:26]
                    io.stop <= UInt<1>("h00") @[i2c_master.scala 134:25]
                    state <= UInt<3>("h07") @[i2c_master.scala 135:23]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_18 = eq(UInt<3>("h07"), state) @[Conditional.scala 37:30]
                    when _T_18 : @[Conditional.scala 39:67]
                      io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 139:28]
                      intr_done <= UInt<1>("h01") @[i2c_master.scala 140:27]
                      io.ready <= UInt<1>("h00") @[i2c_master.scala 141:26]
                      io.stop <= UInt<1>("h01") @[i2c_master.scala 142:25]
                      state <= UInt<3>("h00") @[i2c_master.scala 143:23]
                      skip @[Conditional.scala 39:67]
      skip @[i2c_master.scala 55:16]
    io.i2c_intr <= intr_done @[i2c_master.scala 148:17]
    
  module i2c_slave : 
    input clock : Clock
    input reset : Reset
    output io : {flip sda_in : UInt<1>, flip scl_in : UInt<1>, flip ready : UInt<1>, sda_out : UInt<1>, data_out : UInt<8>}
    
    reg count : UInt<8>, clock with : (reset => (reset, UInt<8>("h01"))) @[i2c_slave.scala 30:20]
    reg rx_state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_slave.scala 31:23]
    rx_state <= UInt<3>("h00") @[i2c_slave.scala 33:10]
    io.sda_out <= UInt<1>("h00") @[i2c_slave.scala 35:12]
    reg addr_bit1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 38:24]
    reg addr_bit2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 39:24]
    reg addr_bit3 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 40:24]
    reg addr_bit4 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 41:24]
    reg addr_bit5 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 42:24]
    reg addr_bit6 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 43:24]
    reg addr_bit7 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 44:24]
    reg complete_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[i2c_slave.scala 45:28]
    reg data_bit1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 47:24]
    reg data_bit2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 48:24]
    reg data_bit3 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 49:24]
    reg data_bit4 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 50:24]
    reg data_bit5 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 51:24]
    reg data_bit6 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 52:24]
    reg data_bit7 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 53:24]
    reg data_bit8 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_slave.scala 54:24]
    reg data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_slave.scala 55:19]
    node _T = eq(UInt<3>("h00"), rx_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.ready : @[i2c_slave.scala 62:23]
        rx_state <= UInt<3>("h01") @[i2c_slave.scala 64:22]
        skip @[i2c_slave.scala 62:23]
      else : @[i2c_slave.scala 65:20]
        rx_state <= UInt<3>("h00") @[i2c_slave.scala 67:22]
        skip @[i2c_slave.scala 65:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<3>("h01"), rx_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = lt(count, UInt<4>("h08")) @[i2c_slave.scala 72:20]
        when _T_2 : @[i2c_slave.scala 72:26]
          node _T_3 = eq(rx_state, UInt<1>("h01")) @[i2c_slave.scala 73:27]
          node _T_4 = eq(count, UInt<1>("h01")) @[i2c_slave.scala 73:44]
          node _T_5 = and(_T_3, _T_4) @[i2c_slave.scala 73:35]
          when _T_5 : @[i2c_slave.scala 73:52]
            addr_bit1 <= io.sda_in @[i2c_slave.scala 74:23]
            skip @[i2c_slave.scala 73:52]
          else : @[i2c_slave.scala 76:20]
            node _count_T = add(count, UInt<1>("h01")) @[i2c_slave.scala 77:28]
            node _count_T_1 = tail(_count_T, 1) @[i2c_slave.scala 77:28]
            count <= _count_T_1 @[i2c_slave.scala 77:19]
            rx_state <= UInt<3>("h01") @[i2c_slave.scala 78:22]
            skip @[i2c_slave.scala 76:20]
          node _T_6 = eq(count, UInt<2>("h02")) @[i2c_slave.scala 82:20]
          when _T_6 : @[i2c_slave.scala 82:28]
            addr_bit2 <= io.sda_in @[i2c_slave.scala 83:23]
            skip @[i2c_slave.scala 82:28]
          else : @[i2c_slave.scala 84:20]
            node _count_T_2 = add(count, UInt<1>("h01")) @[i2c_slave.scala 85:28]
            node _count_T_3 = tail(_count_T_2, 1) @[i2c_slave.scala 85:28]
            count <= _count_T_3 @[i2c_slave.scala 85:19]
            rx_state <= UInt<3>("h01") @[i2c_slave.scala 86:22]
            skip @[i2c_slave.scala 84:20]
          node _T_7 = eq(count, UInt<2>("h03")) @[i2c_slave.scala 90:20]
          when _T_7 : @[i2c_slave.scala 90:28]
            addr_bit3 <= io.sda_in @[i2c_slave.scala 91:23]
            skip @[i2c_slave.scala 90:28]
          else : @[i2c_slave.scala 92:20]
            rx_state <= UInt<3>("h01") @[i2c_slave.scala 93:22]
            node _count_T_4 = add(count, UInt<1>("h01")) @[i2c_slave.scala 94:28]
            node _count_T_5 = tail(_count_T_4, 1) @[i2c_slave.scala 94:28]
            count <= _count_T_5 @[i2c_slave.scala 94:19]
            skip @[i2c_slave.scala 92:20]
          node _T_8 = eq(count, UInt<3>("h04")) @[i2c_slave.scala 98:20]
          when _T_8 : @[i2c_slave.scala 98:28]
            addr_bit4 <= io.sda_in @[i2c_slave.scala 99:23]
            skip @[i2c_slave.scala 98:28]
          else : @[i2c_slave.scala 100:20]
            rx_state <= UInt<3>("h01") @[i2c_slave.scala 101:22]
            node _count_T_6 = add(count, UInt<1>("h01")) @[i2c_slave.scala 102:28]
            node _count_T_7 = tail(_count_T_6, 1) @[i2c_slave.scala 102:28]
            count <= _count_T_7 @[i2c_slave.scala 102:19]
            skip @[i2c_slave.scala 100:20]
          node _T_9 = eq(count, UInt<3>("h05")) @[i2c_slave.scala 106:20]
          when _T_9 : @[i2c_slave.scala 106:28]
            addr_bit5 <= io.sda_in @[i2c_slave.scala 107:23]
            skip @[i2c_slave.scala 106:28]
          else : @[i2c_slave.scala 108:20]
            rx_state <= UInt<3>("h01") @[i2c_slave.scala 109:22]
            node _count_T_8 = add(count, UInt<1>("h01")) @[i2c_slave.scala 110:28]
            node _count_T_9 = tail(_count_T_8, 1) @[i2c_slave.scala 110:28]
            count <= _count_T_9 @[i2c_slave.scala 110:19]
            skip @[i2c_slave.scala 108:20]
          node _T_10 = eq(count, UInt<3>("h06")) @[i2c_slave.scala 114:20]
          when _T_10 : @[i2c_slave.scala 114:28]
            addr_bit6 <= io.sda_in @[i2c_slave.scala 115:23]
            skip @[i2c_slave.scala 114:28]
          else : @[i2c_slave.scala 116:20]
            rx_state <= UInt<3>("h01") @[i2c_slave.scala 117:22]
            node _count_T_10 = add(count, UInt<1>("h01")) @[i2c_slave.scala 118:28]
            node _count_T_11 = tail(_count_T_10, 1) @[i2c_slave.scala 118:28]
            count <= _count_T_11 @[i2c_slave.scala 118:19]
            skip @[i2c_slave.scala 116:20]
          node _T_11 = eq(count, UInt<3>("h07")) @[i2c_slave.scala 123:20]
          when _T_11 : @[i2c_slave.scala 123:28]
            addr_bit7 <= io.sda_in @[i2c_slave.scala 124:23]
            skip @[i2c_slave.scala 123:28]
          else : @[i2c_slave.scala 125:20]
            rx_state <= UInt<3>("h01") @[i2c_slave.scala 126:22]
            node _count_T_12 = add(count, UInt<1>("h01")) @[i2c_slave.scala 127:28]
            node _count_T_13 = tail(_count_T_12, 1) @[i2c_slave.scala 127:28]
            count <= _count_T_13 @[i2c_slave.scala 127:19]
            skip @[i2c_slave.scala 125:20]
          node _count_T_14 = add(count, UInt<1>("h01")) @[i2c_slave.scala 130:24]
          node _count_T_15 = tail(_count_T_14, 1) @[i2c_slave.scala 130:24]
          count <= _count_T_15 @[i2c_slave.scala 130:15]
          skip @[i2c_slave.scala 72:26]
        else : @[i2c_slave.scala 132:20]
          node complete_addr_lo_hi = cat(addr_bit5, addr_bit6) @[Cat.scala 30:58]
          node complete_addr_lo = cat(complete_addr_lo_hi, addr_bit7) @[Cat.scala 30:58]
          node complete_addr_hi_lo = cat(addr_bit3, addr_bit4) @[Cat.scala 30:58]
          node complete_addr_hi_hi = cat(addr_bit1, addr_bit2) @[Cat.scala 30:58]
          node complete_addr_hi = cat(complete_addr_hi_hi, complete_addr_hi_lo) @[Cat.scala 30:58]
          node _complete_addr_T = cat(complete_addr_hi, complete_addr_lo) @[Cat.scala 30:58]
          complete_addr <= _complete_addr_T @[i2c_slave.scala 133:27]
          data <= UInt<1>("h00") @[i2c_slave.scala 134:18]
          rx_state <= UInt<3>("h02") @[i2c_slave.scala 135:22]
          skip @[i2c_slave.scala 132:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_12 = eq(UInt<3>("h02"), rx_state) @[Conditional.scala 37:30]
        when _T_12 : @[Conditional.scala 39:67]
          node _T_13 = eq(complete_addr, UInt<7>("h063")) @[i2c_slave.scala 142:32]
          when _T_13 : @[i2c_slave.scala 142:47]
            io.sda_out <= UInt<1>("h00") @[i2c_slave.scala 143:24]
            rx_state <= UInt<3>("h03") @[i2c_slave.scala 144:22]
            skip @[i2c_slave.scala 142:47]
          else : @[i2c_slave.scala 145:20]
            io.sda_out <= UInt<1>("h01") @[i2c_slave.scala 146:24]
            rx_state <= UInt<3>("h04") @[i2c_slave.scala 147:22]
            skip @[i2c_slave.scala 145:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_14 = eq(UInt<3>("h03"), rx_state) @[Conditional.scala 37:30]
          when _T_14 : @[Conditional.scala 39:67]
            node _T_15 = lt(count, UInt<5>("h010")) @[i2c_slave.scala 154:20]
            when _T_15 : @[i2c_slave.scala 154:27]
              node _T_16 = eq(rx_state, UInt<2>("h03")) @[i2c_slave.scala 156:27]
              node _T_17 = eq(count, UInt<4>("h08")) @[i2c_slave.scala 156:44]
              node _T_18 = and(_T_16, _T_17) @[i2c_slave.scala 156:35]
              when _T_18 : @[i2c_slave.scala 156:52]
                data_bit1 <= io.sda_in @[i2c_slave.scala 157:23]
                skip @[i2c_slave.scala 156:52]
              else : @[i2c_slave.scala 159:20]
                node _count_T_16 = add(count, UInt<1>("h01")) @[i2c_slave.scala 160:28]
                node _count_T_17 = tail(_count_T_16, 1) @[i2c_slave.scala 160:28]
                count <= _count_T_17 @[i2c_slave.scala 160:19]
                rx_state <= UInt<3>("h03") @[i2c_slave.scala 161:22]
                skip @[i2c_slave.scala 159:20]
              node _T_19 = eq(count, UInt<4>("h09")) @[i2c_slave.scala 164:20]
              when _T_19 : @[i2c_slave.scala 164:28]
                data_bit2 <= io.sda_in @[i2c_slave.scala 165:23]
                skip @[i2c_slave.scala 164:28]
              else : @[i2c_slave.scala 167:20]
                node _count_T_18 = add(count, UInt<1>("h01")) @[i2c_slave.scala 168:28]
                node _count_T_19 = tail(_count_T_18, 1) @[i2c_slave.scala 168:28]
                count <= _count_T_19 @[i2c_slave.scala 168:19]
                rx_state <= UInt<3>("h03") @[i2c_slave.scala 169:22]
                skip @[i2c_slave.scala 167:20]
              node _T_20 = eq(count, UInt<4>("h0a")) @[i2c_slave.scala 172:20]
              when _T_20 : @[i2c_slave.scala 172:29]
                data_bit3 <= io.sda_in @[i2c_slave.scala 173:23]
                skip @[i2c_slave.scala 172:29]
              else : @[i2c_slave.scala 175:20]
                node _count_T_20 = add(count, UInt<1>("h01")) @[i2c_slave.scala 176:28]
                node _count_T_21 = tail(_count_T_20, 1) @[i2c_slave.scala 176:28]
                count <= _count_T_21 @[i2c_slave.scala 176:19]
                rx_state <= UInt<3>("h03") @[i2c_slave.scala 177:22]
                skip @[i2c_slave.scala 175:20]
              node _T_21 = eq(count, UInt<4>("h0b")) @[i2c_slave.scala 180:20]
              when _T_21 : @[i2c_slave.scala 180:29]
                data_bit4 <= io.sda_in @[i2c_slave.scala 181:23]
                skip @[i2c_slave.scala 180:29]
              else : @[i2c_slave.scala 183:20]
                node _count_T_22 = add(count, UInt<1>("h01")) @[i2c_slave.scala 184:28]
                node _count_T_23 = tail(_count_T_22, 1) @[i2c_slave.scala 184:28]
                count <= _count_T_23 @[i2c_slave.scala 184:19]
                rx_state <= UInt<3>("h03") @[i2c_slave.scala 185:22]
                skip @[i2c_slave.scala 183:20]
              node _T_22 = eq(count, UInt<4>("h0c")) @[i2c_slave.scala 188:20]
              when _T_22 : @[i2c_slave.scala 188:29]
                data_bit5 <= io.sda_in @[i2c_slave.scala 189:23]
                skip @[i2c_slave.scala 188:29]
              else : @[i2c_slave.scala 191:20]
                node _count_T_24 = add(count, UInt<1>("h01")) @[i2c_slave.scala 192:28]
                node _count_T_25 = tail(_count_T_24, 1) @[i2c_slave.scala 192:28]
                count <= _count_T_25 @[i2c_slave.scala 192:19]
                rx_state <= UInt<3>("h03") @[i2c_slave.scala 193:22]
                skip @[i2c_slave.scala 191:20]
              node _T_23 = eq(count, UInt<4>("h0d")) @[i2c_slave.scala 196:20]
              when _T_23 : @[i2c_slave.scala 196:29]
                data_bit6 <= io.sda_in @[i2c_slave.scala 197:23]
                skip @[i2c_slave.scala 196:29]
              else : @[i2c_slave.scala 199:20]
                node _count_T_26 = add(count, UInt<1>("h01")) @[i2c_slave.scala 200:28]
                node _count_T_27 = tail(_count_T_26, 1) @[i2c_slave.scala 200:28]
                count <= _count_T_27 @[i2c_slave.scala 200:19]
                rx_state <= UInt<3>("h03") @[i2c_slave.scala 201:22]
                skip @[i2c_slave.scala 199:20]
              node _T_24 = eq(count, UInt<4>("h0e")) @[i2c_slave.scala 204:20]
              when _T_24 : @[i2c_slave.scala 204:29]
                data_bit7 <= io.sda_in @[i2c_slave.scala 205:23]
                skip @[i2c_slave.scala 204:29]
              else : @[i2c_slave.scala 207:20]
                node _count_T_28 = add(count, UInt<1>("h01")) @[i2c_slave.scala 208:28]
                node _count_T_29 = tail(_count_T_28, 1) @[i2c_slave.scala 208:28]
                count <= _count_T_29 @[i2c_slave.scala 208:19]
                rx_state <= UInt<3>("h03") @[i2c_slave.scala 209:22]
                skip @[i2c_slave.scala 207:20]
              node _T_25 = eq(count, UInt<4>("h0f")) @[i2c_slave.scala 212:20]
              when _T_25 : @[i2c_slave.scala 212:29]
                data_bit8 <= io.sda_in @[i2c_slave.scala 213:23]
                skip @[i2c_slave.scala 212:29]
              else : @[i2c_slave.scala 215:20]
                node _count_T_30 = add(count, UInt<1>("h01")) @[i2c_slave.scala 216:28]
                node _count_T_31 = tail(_count_T_30, 1) @[i2c_slave.scala 216:28]
                count <= _count_T_31 @[i2c_slave.scala 216:19]
                rx_state <= UInt<3>("h03") @[i2c_slave.scala 217:22]
                skip @[i2c_slave.scala 215:20]
              node _count_T_32 = add(count, UInt<1>("h01")) @[i2c_slave.scala 220:24]
              node _count_T_33 = tail(_count_T_32, 1) @[i2c_slave.scala 220:24]
              count <= _count_T_33 @[i2c_slave.scala 220:15]
              skip @[i2c_slave.scala 154:27]
            else : @[i2c_slave.scala 222:20]
              node data_lo_lo = cat(data_bit7, data_bit8) @[Cat.scala 30:58]
              node data_lo_hi = cat(data_bit5, data_bit6) @[Cat.scala 30:58]
              node data_lo = cat(data_lo_hi, data_lo_lo) @[Cat.scala 30:58]
              node data_hi_lo = cat(data_bit3, data_bit4) @[Cat.scala 30:58]
              node data_hi_hi = cat(data_bit1, data_bit2) @[Cat.scala 30:58]
              node data_hi = cat(data_hi_hi, data_hi_lo) @[Cat.scala 30:58]
              node _data_T = cat(data_hi, data_lo) @[Cat.scala 30:58]
              data <= _data_T @[i2c_slave.scala 223:18]
              io.sda_out <= UInt<1>("h00") @[i2c_slave.scala 224:24]
              rx_state <= UInt<3>("h04") @[i2c_slave.scala 225:22]
              skip @[i2c_slave.scala 222:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_26 = eq(UInt<3>("h04"), rx_state) @[Conditional.scala 37:30]
            when _T_26 : @[Conditional.scala 39:67]
              count <= UInt<1>("h00") @[i2c_slave.scala 233:15]
              rx_state <= UInt<3>("h00") @[i2c_slave.scala 234:18]
              skip @[Conditional.scala 39:67]
    io.data_out <= data @[i2c_slave.scala 242:13]
    
  module I2C_Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wdata : UInt<32>, flip addr : UInt<7>, flip ren : UInt<1>, flip we : UInt<1>, sda : UInt<1>, scl : UInt<1>, ready : UInt<1>, stop : UInt<1>, data_out : UInt<8>, intr : UInt<1>}
    
    reg addr_start_bit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 30:33]
    reg addr_slave_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[I2C_Top.scala 31:34]
    reg addr_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[I2C_Top.scala 32:28]
    reg addr_read_write_bit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 33:38]
    node _T = eq(io.ren, UInt<1>("h00")) @[I2C_Top.scala 39:10]
    node _T_1 = and(_T, io.we) @[I2C_Top.scala 39:20]
    when _T_1 : @[I2C_Top.scala 39:29]
      node _T_2 = eq(io.addr, UInt<1>("h00")) @[I2C_Top.scala 40:18]
      when _T_2 : @[I2C_Top.scala 40:37]
        node _addr_start_bit_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 41:35]
        addr_start_bit <= _addr_start_bit_T @[I2C_Top.scala 41:24]
        skip @[I2C_Top.scala 40:37]
      else : @[I2C_Top.scala 42:44]
        node _T_3 = eq(io.addr, UInt<3>("h04")) @[I2C_Top.scala 42:24]
        when _T_3 : @[I2C_Top.scala 42:44]
          node _addr_slave_addr_T = bits(io.wdata, 6, 0) @[I2C_Top.scala 43:36]
          addr_slave_addr <= _addr_slave_addr_T @[I2C_Top.scala 43:25]
          skip @[I2C_Top.scala 42:44]
        else : @[I2C_Top.scala 44:38]
          node _T_4 = eq(io.addr, UInt<5>("h010")) @[I2C_Top.scala 44:24]
          when _T_4 : @[I2C_Top.scala 44:38]
            node _addr_data_T = bits(io.wdata, 7, 0) @[I2C_Top.scala 45:30]
            addr_data <= _addr_data_T @[I2C_Top.scala 45:19]
            skip @[I2C_Top.scala 44:38]
          else : @[I2C_Top.scala 46:48]
            node _T_5 = eq(io.addr, UInt<4>("h08")) @[I2C_Top.scala 46:24]
            when _T_5 : @[I2C_Top.scala 46:48]
              node _addr_read_write_bit_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 47:40]
              addr_read_write_bit <= _addr_read_write_bit_T @[I2C_Top.scala 47:29]
              skip @[I2C_Top.scala 46:48]
            else : @[I2C_Top.scala 52:16]
              addr_start_bit <= UInt<1>("h00") @[I2C_Top.scala 53:24]
              addr_slave_addr <= UInt<1>("h00") @[I2C_Top.scala 54:25]
              addr_data <= UInt<1>("h00") @[I2C_Top.scala 55:19]
              skip @[I2C_Top.scala 52:16]
      skip @[I2C_Top.scala 39:29]
    inst i2c_master of i2c_master @[I2C_Top.scala 61:28]
    i2c_master.clock <= clock
    i2c_master.reset <= reset
    i2c_master.io.start <= addr_start_bit @[I2C_Top.scala 62:25]
    i2c_master.io.addr <= addr_slave_addr @[I2C_Top.scala 63:24]
    i2c_master.io.data <= addr_data @[I2C_Top.scala 64:24]
    io.sda <= i2c_master.io.i2c_sda @[I2C_Top.scala 66:12]
    io.scl <= i2c_master.io.i2c_scl @[I2C_Top.scala 67:12]
    io.intr <= i2c_master.io.i2c_intr @[I2C_Top.scala 68:13]
    io.ready <= i2c_master.io.ready @[I2C_Top.scala 69:14]
    io.stop <= i2c_master.io.stop @[I2C_Top.scala 70:13]
    inst i2c_slave of i2c_slave @[I2C_Top.scala 73:27]
    i2c_slave.clock <= clock
    i2c_slave.reset <= reset
    i2c_slave.io.sda_in <= i2c_master.io.i2c_sda @[I2C_Top.scala 74:25]
    i2c_slave.io.ready <= i2c_master.io.ready @[I2C_Top.scala 75:24]
    i2c_slave.io.scl_in <= i2c_master.io.i2c_scl @[I2C_Top.scala 77:25]
    i2c_master.io.i2c_sda_in <= i2c_slave.io.sda_out @[I2C_Top.scala 78:30]
    io.data_out <= i2c_slave.io.data_out @[I2C_Top.scala 79:17]
    
