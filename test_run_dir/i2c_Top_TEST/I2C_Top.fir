;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit I2C_Top : 
  module i2c_master : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, flip addr : UInt<7>, flip data : UInt<8>, flip read_write : UInt<1>, flip i2c_sda_in : UInt<1>, i2c_sda : UInt<1>, i2c_scl : UInt<1>, ready : UInt<1>, stop : UInt<1>, i2c_intr : UInt<1>}
    
    reg state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_master.scala 25:24]
    reg count : UInt<15>, clock with : (reset => (reset, UInt<15>("h00"))) @[i2c_master.scala 26:24]
    reg saved_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[i2c_master.scala 27:29]
    reg saved_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_master.scala 28:29]
    reg i2c_scl_enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[i2c_master.scala 29:33]
    reg intr_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_master.scala 30:28]
    wire WACK1 : UInt
    WACK1 <= UInt<1>("h00")
    wire WACK2 : UInt
    WACK2 <= UInt<1>("h00")
    reg WACK11 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_master.scala 35:25]
    reg WACK22 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_master.scala 36:25]
    state <= UInt<3>("h00") @[i2c_master.scala 40:11]
    io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 42:16]
    io.ready <= UInt<1>("h00") @[i2c_master.scala 43:14]
    io.stop <= UInt<1>("h00") @[i2c_master.scala 44:13]
    node _clk_T = asUInt(clock) @[i2c_master.scala 46:36]
    node _clk_T_1 = bits(_clk_T, 0, 0) @[i2c_master.scala 46:38]
    wire clk : UInt<1>
    clk <= _clk_T_1
    node _rst_T = asUInt(reset) @[i2c_master.scala 47:36]
    node _rst_T_1 = bits(_rst_T, 0, 0) @[i2c_master.scala 47:38]
    wire rst : UInt<1>
    rst <= _rst_T_1
    node _io_i2c_scl_T = eq(i2c_scl_enable, UInt<1>("h00")) @[i2c_master.scala 49:38]
    node _io_i2c_scl_T_1 = not(clk) @[i2c_master.scala 49:54]
    node _io_i2c_scl_T_2 = mux(_io_i2c_scl_T, UInt<1>("h01"), _io_i2c_scl_T_1) @[i2c_master.scala 49:22]
    io.i2c_scl <= _io_i2c_scl_T_2 @[i2c_master.scala 49:16]
    node _T = eq(rst, UInt<1>("h01")) @[i2c_master.scala 51:14]
    when _T : @[i2c_master.scala 51:22]
      i2c_scl_enable <= UInt<1>("h00") @[i2c_master.scala 52:24]
      skip @[i2c_master.scala 51:22]
    else : @[i2c_master.scala 53:16]
      node _T_1 = eq(state, UInt<3>("h00")) @[i2c_master.scala 54:22]
      node _T_2 = eq(state, UInt<3>("h01")) @[i2c_master.scala 54:46]
      node _T_3 = or(_T_1, _T_2) @[i2c_master.scala 54:37]
      node _T_4 = eq(state, UInt<3>("h07")) @[i2c_master.scala 54:71]
      node _T_5 = or(_T_3, _T_4) @[i2c_master.scala 54:62]
      when _T_5 : @[i2c_master.scala 54:87]
        i2c_scl_enable <= UInt<1>("h00") @[i2c_master.scala 55:28]
        skip @[i2c_master.scala 54:87]
      else : @[i2c_master.scala 56:20]
        i2c_scl_enable <= UInt<1>("h01") @[i2c_master.scala 57:29]
        skip @[i2c_master.scala 56:20]
      skip @[i2c_master.scala 53:16]
    node _T_6 = eq(rst, UInt<1>("h01")) @[i2c_master.scala 61:14]
    when _T_6 : @[i2c_master.scala 61:22]
      state <= UInt<3>("h00") @[i2c_master.scala 62:15]
      io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 63:20]
      skip @[i2c_master.scala 61:22]
    else : @[i2c_master.scala 64:16]
      node _T_7 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 40:58]
        io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 67:28]
        intr_done <= UInt<1>("h00") @[i2c_master.scala 68:27]
        node _T_8 = eq(io.start, UInt<1>("h01")) @[i2c_master.scala 69:31]
        when _T_8 : @[i2c_master.scala 69:39]
          state <= UInt<3>("h01") @[i2c_master.scala 70:27]
          io.ready <= UInt<1>("h00") @[i2c_master.scala 71:30]
          io.stop <= UInt<1>("h00") @[i2c_master.scala 72:29]
          skip @[i2c_master.scala 69:39]
        else : @[i2c_master.scala 73:28]
          state <= UInt<3>("h00") @[i2c_master.scala 74:27]
          skip @[i2c_master.scala 73:28]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_9 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
        when _T_9 : @[Conditional.scala 39:67]
          io.i2c_sda <= UInt<1>("h00") @[i2c_master.scala 80:28]
          saved_addr <= io.addr @[i2c_master.scala 81:28]
          saved_data <= io.data @[i2c_master.scala 82:28]
          io.ready <= UInt<1>("h01") @[i2c_master.scala 83:26]
          io.stop <= UInt<1>("h00") @[i2c_master.scala 84:25]
          state <= UInt<3>("h02") @[i2c_master.scala 85:23]
          count <= UInt<3>("h06") @[i2c_master.scala 86:23]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_10 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
          when _T_10 : @[Conditional.scala 39:67]
            node _io_i2c_sda_T = dshr(io.addr, count) @[i2c_master.scala 90:38]
            node _io_i2c_sda_T_1 = bits(_io_i2c_sda_T, 0, 0) @[i2c_master.scala 90:38]
            io.i2c_sda <= _io_i2c_sda_T_1 @[i2c_master.scala 90:28]
            io.ready <= UInt<1>("h00") @[i2c_master.scala 91:26]
            io.stop <= UInt<1>("h00") @[i2c_master.scala 92:25]
            node _T_11 = eq(count, UInt<1>("h00")) @[i2c_master.scala 93:28]
            when _T_11 : @[i2c_master.scala 93:36]
              state <= UInt<3>("h03") @[i2c_master.scala 94:27]
              skip @[i2c_master.scala 93:36]
            else : @[i2c_master.scala 95:28]
              node _count_T = sub(count, UInt<1>("h01")) @[i2c_master.scala 96:36]
              node _count_T_1 = tail(_count_T, 1) @[i2c_master.scala 96:36]
              count <= _count_T_1 @[i2c_master.scala 96:27]
              state <= UInt<3>("h02") @[i2c_master.scala 97:27]
              skip @[i2c_master.scala 95:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              node _T_13 = eq(io.read_write, UInt<1>("h00")) @[i2c_master.scala 103:36]
              when _T_13 : @[i2c_master.scala 103:44]
                io.i2c_sda <= UInt<1>("h00") @[i2c_master.scala 104:32]
                io.ready <= UInt<1>("h00") @[i2c_master.scala 105:30]
                io.stop <= UInt<1>("h00") @[i2c_master.scala 106:29]
                state <= UInt<3>("h04") @[i2c_master.scala 107:27]
                count <= UInt<4>("h08") @[i2c_master.scala 108:27]
                skip @[i2c_master.scala 103:44]
              else : @[i2c_master.scala 109:28]
                io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 110:32]
                io.ready <= UInt<1>("h00") @[i2c_master.scala 111:30]
                io.stop <= UInt<1>("h00") @[i2c_master.scala 112:29]
                state <= UInt<3>("h04") @[i2c_master.scala 113:27]
                count <= UInt<3>("h07") @[i2c_master.scala 114:27]
                skip @[i2c_master.scala 109:28]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_14 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
              when _T_14 : @[Conditional.scala 39:67]
                node _T_15 = eq(io.i2c_sda_in, UInt<1>("h00")) @[i2c_master.scala 120:36]
                when _T_15 : @[i2c_master.scala 120:44]
                  io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 121:28]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 122:26]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 123:25]
                  state <= UInt<3>("h05") @[i2c_master.scala 124:23]
                  skip @[i2c_master.scala 120:44]
                else : @[i2c_master.scala 125:28]
                  io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 126:32]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 127:30]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 128:29]
                  state <= UInt<3>("h07") @[i2c_master.scala 129:27]
                  skip @[i2c_master.scala 125:28]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_16 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
                when _T_16 : @[Conditional.scala 39:67]
                  node _io_i2c_sda_T_2 = dshr(io.data, count) @[i2c_master.scala 136:38]
                  node _io_i2c_sda_T_3 = bits(_io_i2c_sda_T_2, 0, 0) @[i2c_master.scala 136:38]
                  io.i2c_sda <= _io_i2c_sda_T_3 @[i2c_master.scala 136:28]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 137:26]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 138:25]
                  node _T_17 = eq(count, UInt<1>("h00")) @[i2c_master.scala 139:28]
                  when _T_17 : @[i2c_master.scala 139:36]
                    state <= UInt<3>("h06") @[i2c_master.scala 140:27]
                    skip @[i2c_master.scala 139:36]
                  else : @[i2c_master.scala 141:28]
                    node _count_T_2 = sub(count, UInt<1>("h01")) @[i2c_master.scala 142:36]
                    node _count_T_3 = tail(_count_T_2, 1) @[i2c_master.scala 142:36]
                    count <= _count_T_3 @[i2c_master.scala 142:27]
                    state <= UInt<3>("h05") @[i2c_master.scala 143:27]
                    skip @[i2c_master.scala 141:28]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_18 = eq(UInt<3>("h06"), state) @[Conditional.scala 37:30]
                  when _T_18 : @[Conditional.scala 39:67]
                    io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 149:28]
                    io.ready <= UInt<1>("h00") @[i2c_master.scala 150:26]
                    io.stop <= UInt<1>("h00") @[i2c_master.scala 151:25]
                    state <= UInt<3>("h07") @[i2c_master.scala 152:23]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_19 = eq(UInt<3>("h07"), state) @[Conditional.scala 37:30]
                    when _T_19 : @[Conditional.scala 39:67]
                      io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 156:28]
                      intr_done <= UInt<1>("h01") @[i2c_master.scala 157:27]
                      io.ready <= UInt<1>("h00") @[i2c_master.scala 158:26]
                      io.stop <= UInt<1>("h00") @[i2c_master.scala 159:25]
                      state <= UInt<3>("h00") @[i2c_master.scala 160:23]
                      skip @[Conditional.scala 39:67]
      skip @[i2c_master.scala 64:16]
    io.i2c_intr <= intr_done @[i2c_master.scala 165:17]
    
  module I2C_Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wdata : UInt<32>, flip addr : UInt<7>, flip ren : UInt<1>, flip we : UInt<1>, flip sda_in : UInt<1>, sda : UInt<1>, scl : UInt<1>, intr : UInt<1>}
    
    reg addr_start_bit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 27:33]
    reg addr_slave_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[I2C_Top.scala 28:34]
    reg addr_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[I2C_Top.scala 29:28]
    reg addr_read_write_bit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 30:38]
    reg addr_sda_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 31:30]
    node _T = eq(io.ren, UInt<1>("h00")) @[I2C_Top.scala 36:10]
    node _T_1 = and(_T, io.we) @[I2C_Top.scala 36:20]
    when _T_1 : @[I2C_Top.scala 36:29]
      node _T_2 = eq(io.addr, UInt<1>("h00")) @[I2C_Top.scala 37:18]
      when _T_2 : @[I2C_Top.scala 37:37]
        node _addr_start_bit_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 38:35]
        addr_start_bit <= _addr_start_bit_T @[I2C_Top.scala 38:24]
        skip @[I2C_Top.scala 37:37]
      else : @[I2C_Top.scala 39:44]
        node _T_3 = eq(io.addr, UInt<3>("h04")) @[I2C_Top.scala 39:24]
        when _T_3 : @[I2C_Top.scala 39:44]
          node _addr_slave_addr_T = bits(io.wdata, 6, 0) @[I2C_Top.scala 40:36]
          addr_slave_addr <= _addr_slave_addr_T @[I2C_Top.scala 40:25]
          skip @[I2C_Top.scala 39:44]
        else : @[I2C_Top.scala 41:38]
          node _T_4 = eq(io.addr, UInt<5>("h010")) @[I2C_Top.scala 41:24]
          when _T_4 : @[I2C_Top.scala 41:38]
            node _addr_data_T = bits(io.wdata, 7, 0) @[I2C_Top.scala 42:30]
            addr_data <= _addr_data_T @[I2C_Top.scala 42:19]
            skip @[I2C_Top.scala 41:38]
          else : @[I2C_Top.scala 43:48]
            node _T_5 = eq(io.addr, UInt<4>("h08")) @[I2C_Top.scala 43:24]
            when _T_5 : @[I2C_Top.scala 43:48]
              node _addr_read_write_bit_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 44:40]
              addr_read_write_bit <= _addr_read_write_bit_T @[I2C_Top.scala 44:29]
              skip @[I2C_Top.scala 43:48]
            else : @[I2C_Top.scala 45:40]
              node _T_6 = eq(io.addr, UInt<4>("h0c")) @[I2C_Top.scala 45:24]
              when _T_6 : @[I2C_Top.scala 45:40]
                node _addr_sda_in_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 46:33]
                addr_sda_in <= _addr_sda_in_T @[I2C_Top.scala 46:22]
                skip @[I2C_Top.scala 45:40]
              else : @[I2C_Top.scala 49:16]
                addr_start_bit <= UInt<1>("h00") @[I2C_Top.scala 50:24]
                addr_slave_addr <= UInt<1>("h00") @[I2C_Top.scala 51:25]
                addr_data <= UInt<1>("h00") @[I2C_Top.scala 52:19]
                skip @[I2C_Top.scala 49:16]
      skip @[I2C_Top.scala 36:29]
    inst i2c of i2c_master @[I2C_Top.scala 58:21]
    i2c.clock <= clock
    i2c.reset <= reset
    i2c.io.start <= addr_start_bit @[I2C_Top.scala 59:18]
    i2c.io.addr <= addr_slave_addr @[I2C_Top.scala 60:17]
    i2c.io.data <= addr_data @[I2C_Top.scala 61:17]
    i2c.io.read_write <= addr_read_write_bit @[I2C_Top.scala 62:23]
    i2c.io.i2c_sda_in <= addr_sda_in @[I2C_Top.scala 63:23]
    io.sda <= i2c.io.i2c_sda @[I2C_Top.scala 66:12]
    io.scl <= i2c.io.i2c_scl @[I2C_Top.scala 67:12]
    io.intr <= i2c.io.i2c_intr @[I2C_Top.scala 68:13]
    
